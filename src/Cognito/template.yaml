AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-auth-app
  Cognito Template for sam-auth-app

Parameters:
  ExampleCallbackURL:
    Type: String
    Default: "http://localhost:5173/social-login-confirm-code"
  FrontendOrigin:
    Type: String
  CaptchaDefineAuthChallengeARN:
    Type: String
  CaptchaCreateAuthChallengeARN:
    Type: String
  CaptchaVerifyAuthChallengeARN:
    Type: String

Resources:
  AuthAppUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: AuthAppUserPool
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 12
          PasswordHistorySize: 22
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      LambdaConfig:
        DefineAuthChallenge: !Ref CaptchaDefineAuthChallengeARN
        CreateAuthChallenge: !Ref CaptchaCreateAuthChallengeARN
        VerifyAuthChallengeResponse: !Ref CaptchaVerifyAuthChallengeARN
      AutoVerifiedAttributes:
        - email

  AuthAppUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: AuthAppUserPoolIdentityProvider
    Properties:
      AllowedOAuthFlowsUserPoolClient: true
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_CUSTOM_AUTH
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
      SupportedIdentityProviders:
        - COGNITO
        - Google
      UserPoolId: !Ref AuthAppUserPool
      CallbackURLs:
        - !Ref ExampleCallbackURL
        - !Ref FrontendOrigin
      LogoutURLs:
        - !Ref FrontendOrigin

  # Add Lambda invocation permissions for each trigger
  DefineAuthChallengePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CaptchaDefineAuthChallengeARN
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt AuthAppUserPool.Arn

  CreateAuthChallengePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CaptchaCreateAuthChallengeARN
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt AuthAppUserPool.Arn

  VerifyAuthChallengePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CaptchaVerifyAuthChallengeARN
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt AuthAppUserPool.Arn
  
  AuthAppUserPoolIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref AuthAppUserPool
      ProviderName: "Google"
      ProviderDetails:
        client_id: '{{resolve:secretsmanager:google_api_credentials:SecretString:client_id}}'
        client_secret: '{{resolve:secretsmanager:google_api_credentials:SecretString:client_secret}}'
        authorize_scopes: "profile email openid"
      ProviderType: "Google"
      AttributeMapping:
        email: "email"

  AuthAppUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub user-pool-domain-${AWS::AccountId}-${AWS::Region}
      UserPoolId: !Ref AuthAppUserPool

Outputs:
  AuthAppUserPoolClientID:
    Description: 'AuthAppUserPoolClient ID'
    Value: !Ref AuthAppUserPoolClient
  AuthAppUserPoolARN:
    Description: 'AuthAppUserPool ARN'
    Value: !GetAtt AuthAppUserPool.Arn